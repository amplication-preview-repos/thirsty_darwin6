/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as graphql from "@nestjs/graphql";
import { GraphQLError } from "graphql";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import { ActualitS } from "./ActualitS";
import { ActualitSCountArgs } from "./ActualitSCountArgs";
import { ActualitSFindManyArgs } from "./ActualitSFindManyArgs";
import { ActualitSFindUniqueArgs } from "./ActualitSFindUniqueArgs";
import { CreateActualitSArgs } from "./CreateActualitSArgs";
import { UpdateActualitSArgs } from "./UpdateActualitSArgs";
import { DeleteActualitSArgs } from "./DeleteActualitSArgs";
import { ActualitSService } from "../actualitS.service";
@graphql.Resolver(() => ActualitS)
export class ActualitSResolverBase {
  constructor(protected readonly service: ActualitSService) {}

  async _actualitSItemsMeta(
    @graphql.Args() args: ActualitSCountArgs
  ): Promise<MetaQueryPayload> {
    const result = await this.service.count(args);
    return {
      count: result,
    };
  }

  @graphql.Query(() => [ActualitS])
  async actualitSItems(
    @graphql.Args() args: ActualitSFindManyArgs
  ): Promise<ActualitS[]> {
    return this.service.actualitSItems(args);
  }

  @graphql.Query(() => ActualitS, { nullable: true })
  async actualitS(
    @graphql.Args() args: ActualitSFindUniqueArgs
  ): Promise<ActualitS | null> {
    const result = await this.service.actualitS(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @graphql.Mutation(() => ActualitS)
  async createActualitS(
    @graphql.Args() args: CreateActualitSArgs
  ): Promise<ActualitS> {
    return await this.service.createActualitS({
      ...args,
      data: args.data,
    });
  }

  @graphql.Mutation(() => ActualitS)
  async updateActualitS(
    @graphql.Args() args: UpdateActualitSArgs
  ): Promise<ActualitS | null> {
    try {
      return await this.service.updateActualitS({
        ...args,
        data: args.data,
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.Mutation(() => ActualitS)
  async deleteActualitS(
    @graphql.Args() args: DeleteActualitSArgs
  ): Promise<ActualitS | null> {
    try {
      return await this.service.deleteActualitS(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }
}
