/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as common from "@nestjs/common";
import * as swagger from "@nestjs/swagger";
import { isRecordNotFoundError } from "../../prisma.util";
import * as errors from "../../errors";
import { Request } from "express";
import { plainToClass } from "class-transformer";
import { ApiNestedQuery } from "../../decorators/api-nested-query.decorator";
import { ActualitSService } from "../actualitS.service";
import { ActualitSCreateInput } from "./ActualitSCreateInput";
import { ActualitS } from "./ActualitS";
import { ActualitSFindManyArgs } from "./ActualitSFindManyArgs";
import { ActualitSWhereUniqueInput } from "./ActualitSWhereUniqueInput";
import { ActualitSUpdateInput } from "./ActualitSUpdateInput";

export class ActualitSControllerBase {
  constructor(protected readonly service: ActualitSService) {}
  @common.Post()
  @swagger.ApiCreatedResponse({ type: ActualitS })
  async createActualitS(
    @common.Body() data: ActualitSCreateInput
  ): Promise<ActualitS> {
    return await this.service.createActualitS({
      data: data,
      select: {
        contenu: true,
        createdAt: true,
        dateDePublication: true,
        id: true,
        titre: true,
        updatedAt: true,
      },
    });
  }

  @common.Get()
  @swagger.ApiOkResponse({ type: [ActualitS] })
  @ApiNestedQuery(ActualitSFindManyArgs)
  async actualitSItems(@common.Req() request: Request): Promise<ActualitS[]> {
    const args = plainToClass(ActualitSFindManyArgs, request.query);
    return this.service.actualitSItems({
      ...args,
      select: {
        contenu: true,
        createdAt: true,
        dateDePublication: true,
        id: true,
        titre: true,
        updatedAt: true,
      },
    });
  }

  @common.Get("/:id")
  @swagger.ApiOkResponse({ type: ActualitS })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async actualitS(
    @common.Param() params: ActualitSWhereUniqueInput
  ): Promise<ActualitS | null> {
    const result = await this.service.actualitS({
      where: params,
      select: {
        contenu: true,
        createdAt: true,
        dateDePublication: true,
        id: true,
        titre: true,
        updatedAt: true,
      },
    });
    if (result === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return result;
  }

  @common.Patch("/:id")
  @swagger.ApiOkResponse({ type: ActualitS })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async updateActualitS(
    @common.Param() params: ActualitSWhereUniqueInput,
    @common.Body() data: ActualitSUpdateInput
  ): Promise<ActualitS | null> {
    try {
      return await this.service.updateActualitS({
        where: params,
        data: data,
        select: {
          contenu: true,
          createdAt: true,
          dateDePublication: true,
          id: true,
          titre: true,
          updatedAt: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.Delete("/:id")
  @swagger.ApiOkResponse({ type: ActualitS })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async deleteActualitS(
    @common.Param() params: ActualitSWhereUniqueInput
  ): Promise<ActualitS | null> {
    try {
      return await this.service.deleteActualitS({
        where: params,
        select: {
          contenu: true,
          createdAt: true,
          dateDePublication: true,
          id: true,
          titre: true,
          updatedAt: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }
}
