/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as common from "@nestjs/common";
import * as swagger from "@nestjs/swagger";
import { isRecordNotFoundError } from "../../prisma.util";
import * as errors from "../../errors";
import { Request } from "express";
import { plainToClass } from "class-transformer";
import { ApiNestedQuery } from "../../decorators/api-nested-query.decorator";
import { PisodesService } from "../pisodes.service";
import { PisodesCreateInput } from "./PisodesCreateInput";
import { Pisodes } from "./Pisodes";
import { PisodesFindManyArgs } from "./PisodesFindManyArgs";
import { PisodesWhereUniqueInput } from "./PisodesWhereUniqueInput";
import { PisodesUpdateInput } from "./PisodesUpdateInput";
import { RediffusionsFindManyArgs } from "../../rediffusions/base/RediffusionsFindManyArgs";
import { Rediffusions } from "../../rediffusions/base/Rediffusions";
import { RediffusionsWhereUniqueInput } from "../../rediffusions/base/RediffusionsWhereUniqueInput";

export class PisodesControllerBase {
  constructor(protected readonly service: PisodesService) {}
  @common.Post()
  @swagger.ApiCreatedResponse({ type: Pisodes })
  async createPisodes(
    @common.Body() data: PisodesCreateInput
  ): Promise<Pisodes> {
    return await this.service.createPisodes({
      data: data,
      select: {
        createdAt: true,
        dateDeDiffusion: true,
        id: true,
        rSum: true,
        titre: true,
        updatedAt: true,
      },
    });
  }

  @common.Get()
  @swagger.ApiOkResponse({ type: [Pisodes] })
  @ApiNestedQuery(PisodesFindManyArgs)
  async pisodesItems(@common.Req() request: Request): Promise<Pisodes[]> {
    const args = plainToClass(PisodesFindManyArgs, request.query);
    return this.service.pisodesItems({
      ...args,
      select: {
        createdAt: true,
        dateDeDiffusion: true,
        id: true,
        rSum: true,
        titre: true,
        updatedAt: true,
      },
    });
  }

  @common.Get("/:id")
  @swagger.ApiOkResponse({ type: Pisodes })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async pisodes(
    @common.Param() params: PisodesWhereUniqueInput
  ): Promise<Pisodes | null> {
    const result = await this.service.pisodes({
      where: params,
      select: {
        createdAt: true,
        dateDeDiffusion: true,
        id: true,
        rSum: true,
        titre: true,
        updatedAt: true,
      },
    });
    if (result === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return result;
  }

  @common.Patch("/:id")
  @swagger.ApiOkResponse({ type: Pisodes })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async updatePisodes(
    @common.Param() params: PisodesWhereUniqueInput,
    @common.Body() data: PisodesUpdateInput
  ): Promise<Pisodes | null> {
    try {
      return await this.service.updatePisodes({
        where: params,
        data: data,
        select: {
          createdAt: true,
          dateDeDiffusion: true,
          id: true,
          rSum: true,
          titre: true,
          updatedAt: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.Delete("/:id")
  @swagger.ApiOkResponse({ type: Pisodes })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async deletePisodes(
    @common.Param() params: PisodesWhereUniqueInput
  ): Promise<Pisodes | null> {
    try {
      return await this.service.deletePisodes({
        where: params,
        select: {
          createdAt: true,
          dateDeDiffusion: true,
          id: true,
          rSum: true,
          titre: true,
          updatedAt: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.Get("/:id/rediffusionsItems")
  @ApiNestedQuery(RediffusionsFindManyArgs)
  async findRediffusionsItems(
    @common.Req() request: Request,
    @common.Param() params: PisodesWhereUniqueInput
  ): Promise<Rediffusions[]> {
    const query = plainToClass(RediffusionsFindManyArgs, request.query);
    const results = await this.service.findRediffusionsItems(params.id, {
      ...query,
      select: {
        createdAt: true,
        dateDeRediffusion: true,
        id: true,

        pisode: {
          select: {
            id: true,
          },
        },

        titre: true,
        updatedAt: true,
      },
    });
    if (results === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return results;
  }

  @common.Post("/:id/rediffusionsItems")
  async connectRediffusionsItems(
    @common.Param() params: PisodesWhereUniqueInput,
    @common.Body() body: RediffusionsWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      rediffusionsItems: {
        connect: body,
      },
    };
    await this.service.updatePisodes({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Patch("/:id/rediffusionsItems")
  async updateRediffusionsItems(
    @common.Param() params: PisodesWhereUniqueInput,
    @common.Body() body: RediffusionsWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      rediffusionsItems: {
        set: body,
      },
    };
    await this.service.updatePisodes({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Delete("/:id/rediffusionsItems")
  async disconnectRediffusionsItems(
    @common.Param() params: PisodesWhereUniqueInput,
    @common.Body() body: RediffusionsWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      rediffusionsItems: {
        disconnect: body,
      },
    };
    await this.service.updatePisodes({
      where: params,
      data,
      select: { id: true },
    });
  }
}
