/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import { PrismaService } from "../../prisma/prisma.service";
import {
  Prisma,
  Pisodes as PrismaPisodes,
  Rediffusions as PrismaRediffusions,
} from "@prisma/client";

export class PisodesServiceBase {
  constructor(protected readonly prisma: PrismaService) {}

  async count(args: Omit<Prisma.PisodesCountArgs, "select">): Promise<number> {
    return this.prisma.pisodes.count(args);
  }

  async pisodesItems(
    args: Prisma.PisodesFindManyArgs
  ): Promise<PrismaPisodes[]> {
    return this.prisma.pisodes.findMany(args);
  }
  async pisodes(
    args: Prisma.PisodesFindUniqueArgs
  ): Promise<PrismaPisodes | null> {
    return this.prisma.pisodes.findUnique(args);
  }
  async createPisodes(args: Prisma.PisodesCreateArgs): Promise<PrismaPisodes> {
    return this.prisma.pisodes.create(args);
  }
  async updatePisodes(args: Prisma.PisodesUpdateArgs): Promise<PrismaPisodes> {
    return this.prisma.pisodes.update(args);
  }
  async deletePisodes(args: Prisma.PisodesDeleteArgs): Promise<PrismaPisodes> {
    return this.prisma.pisodes.delete(args);
  }

  async findRediffusionsItems(
    parentId: string,
    args: Prisma.RediffusionsFindManyArgs
  ): Promise<PrismaRediffusions[]> {
    return this.prisma.pisodes
      .findUniqueOrThrow({
        where: { id: parentId },
      })
      .rediffusionsItems(args);
  }
}
