/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as graphql from "@nestjs/graphql";
import { GraphQLError } from "graphql";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import { Pisodes } from "./Pisodes";
import { PisodesCountArgs } from "./PisodesCountArgs";
import { PisodesFindManyArgs } from "./PisodesFindManyArgs";
import { PisodesFindUniqueArgs } from "./PisodesFindUniqueArgs";
import { CreatePisodesArgs } from "./CreatePisodesArgs";
import { UpdatePisodesArgs } from "./UpdatePisodesArgs";
import { DeletePisodesArgs } from "./DeletePisodesArgs";
import { RediffusionsFindManyArgs } from "../../rediffusions/base/RediffusionsFindManyArgs";
import { Rediffusions } from "../../rediffusions/base/Rediffusions";
import { PisodesService } from "../pisodes.service";
@graphql.Resolver(() => Pisodes)
export class PisodesResolverBase {
  constructor(protected readonly service: PisodesService) {}

  async _pisodesItemsMeta(
    @graphql.Args() args: PisodesCountArgs
  ): Promise<MetaQueryPayload> {
    const result = await this.service.count(args);
    return {
      count: result,
    };
  }

  @graphql.Query(() => [Pisodes])
  async pisodesItems(
    @graphql.Args() args: PisodesFindManyArgs
  ): Promise<Pisodes[]> {
    return this.service.pisodesItems(args);
  }

  @graphql.Query(() => Pisodes, { nullable: true })
  async pisodes(
    @graphql.Args() args: PisodesFindUniqueArgs
  ): Promise<Pisodes | null> {
    const result = await this.service.pisodes(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @graphql.Mutation(() => Pisodes)
  async createPisodes(
    @graphql.Args() args: CreatePisodesArgs
  ): Promise<Pisodes> {
    return await this.service.createPisodes({
      ...args,
      data: args.data,
    });
  }

  @graphql.Mutation(() => Pisodes)
  async updatePisodes(
    @graphql.Args() args: UpdatePisodesArgs
  ): Promise<Pisodes | null> {
    try {
      return await this.service.updatePisodes({
        ...args,
        data: args.data,
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.Mutation(() => Pisodes)
  async deletePisodes(
    @graphql.Args() args: DeletePisodesArgs
  ): Promise<Pisodes | null> {
    try {
      return await this.service.deletePisodes(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.ResolveField(() => [Rediffusions], { name: "rediffusionsItems" })
  async findRediffusionsItems(
    @graphql.Parent() parent: Pisodes,
    @graphql.Args() args: RediffusionsFindManyArgs
  ): Promise<Rediffusions[]> {
    const results = await this.service.findRediffusionsItems(parent.id, args);

    if (!results) {
      return [];
    }

    return results;
  }
}
