/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import { PrismaService } from "../../prisma/prisma.service";
import { Prisma, Animateurs as PrismaAnimateurs } from "@prisma/client";

export class AnimateursServiceBase {
  constructor(protected readonly prisma: PrismaService) {}

  async count(
    args: Omit<Prisma.AnimateursCountArgs, "select">
  ): Promise<number> {
    return this.prisma.animateurs.count(args);
  }

  async animateursItems(
    args: Prisma.AnimateursFindManyArgs
  ): Promise<PrismaAnimateurs[]> {
    return this.prisma.animateurs.findMany(args);
  }
  async animateurs(
    args: Prisma.AnimateursFindUniqueArgs
  ): Promise<PrismaAnimateurs | null> {
    return this.prisma.animateurs.findUnique(args);
  }
  async createAnimateurs(
    args: Prisma.AnimateursCreateArgs
  ): Promise<PrismaAnimateurs> {
    return this.prisma.animateurs.create(args);
  }
  async updateAnimateurs(
    args: Prisma.AnimateursUpdateArgs
  ): Promise<PrismaAnimateurs> {
    return this.prisma.animateurs.update(args);
  }
  async deleteAnimateurs(
    args: Prisma.AnimateursDeleteArgs
  ): Promise<PrismaAnimateurs> {
    return this.prisma.animateurs.delete(args);
  }
}
