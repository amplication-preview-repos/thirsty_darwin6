/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as common from "@nestjs/common";
import * as swagger from "@nestjs/swagger";
import { isRecordNotFoundError } from "../../prisma.util";
import * as errors from "../../errors";
import { Request } from "express";
import { plainToClass } from "class-transformer";
import { ApiNestedQuery } from "../../decorators/api-nested-query.decorator";
import { AnimateursService } from "../animateurs.service";
import { AnimateursCreateInput } from "./AnimateursCreateInput";
import { Animateurs } from "./Animateurs";
import { AnimateursFindManyArgs } from "./AnimateursFindManyArgs";
import { AnimateursWhereUniqueInput } from "./AnimateursWhereUniqueInput";
import { AnimateursUpdateInput } from "./AnimateursUpdateInput";

export class AnimateursControllerBase {
  constructor(protected readonly service: AnimateursService) {}
  @common.Post()
  @swagger.ApiCreatedResponse({ type: Animateurs })
  async createAnimateurs(
    @common.Body() data: AnimateursCreateInput
  ): Promise<Animateurs> {
    return await this.service.createAnimateurs({
      data: data,
      select: {
        biographie: true,
        createdAt: true,
        email: true,
        id: true,
        nom: true,
        updatedAt: true,
      },
    });
  }

  @common.Get()
  @swagger.ApiOkResponse({ type: [Animateurs] })
  @ApiNestedQuery(AnimateursFindManyArgs)
  async animateursItems(@common.Req() request: Request): Promise<Animateurs[]> {
    const args = plainToClass(AnimateursFindManyArgs, request.query);
    return this.service.animateursItems({
      ...args,
      select: {
        biographie: true,
        createdAt: true,
        email: true,
        id: true,
        nom: true,
        updatedAt: true,
      },
    });
  }

  @common.Get("/:id")
  @swagger.ApiOkResponse({ type: Animateurs })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async animateurs(
    @common.Param() params: AnimateursWhereUniqueInput
  ): Promise<Animateurs | null> {
    const result = await this.service.animateurs({
      where: params,
      select: {
        biographie: true,
        createdAt: true,
        email: true,
        id: true,
        nom: true,
        updatedAt: true,
      },
    });
    if (result === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return result;
  }

  @common.Patch("/:id")
  @swagger.ApiOkResponse({ type: Animateurs })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async updateAnimateurs(
    @common.Param() params: AnimateursWhereUniqueInput,
    @common.Body() data: AnimateursUpdateInput
  ): Promise<Animateurs | null> {
    try {
      return await this.service.updateAnimateurs({
        where: params,
        data: data,
        select: {
          biographie: true,
          createdAt: true,
          email: true,
          id: true,
          nom: true,
          updatedAt: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.Delete("/:id")
  @swagger.ApiOkResponse({ type: Animateurs })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async deleteAnimateurs(
    @common.Param() params: AnimateursWhereUniqueInput
  ): Promise<Animateurs | null> {
    try {
      return await this.service.deleteAnimateurs({
        where: params,
        select: {
          biographie: true,
          createdAt: true,
          email: true,
          id: true,
          nom: true,
          updatedAt: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }
}
