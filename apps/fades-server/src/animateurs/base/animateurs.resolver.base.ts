/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as graphql from "@nestjs/graphql";
import { GraphQLError } from "graphql";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import { Animateurs } from "./Animateurs";
import { AnimateursCountArgs } from "./AnimateursCountArgs";
import { AnimateursFindManyArgs } from "./AnimateursFindManyArgs";
import { AnimateursFindUniqueArgs } from "./AnimateursFindUniqueArgs";
import { CreateAnimateursArgs } from "./CreateAnimateursArgs";
import { UpdateAnimateursArgs } from "./UpdateAnimateursArgs";
import { DeleteAnimateursArgs } from "./DeleteAnimateursArgs";
import { AnimateursService } from "../animateurs.service";
@graphql.Resolver(() => Animateurs)
export class AnimateursResolverBase {
  constructor(protected readonly service: AnimateursService) {}

  async _animateursItemsMeta(
    @graphql.Args() args: AnimateursCountArgs
  ): Promise<MetaQueryPayload> {
    const result = await this.service.count(args);
    return {
      count: result,
    };
  }

  @graphql.Query(() => [Animateurs])
  async animateursItems(
    @graphql.Args() args: AnimateursFindManyArgs
  ): Promise<Animateurs[]> {
    return this.service.animateursItems(args);
  }

  @graphql.Query(() => Animateurs, { nullable: true })
  async animateurs(
    @graphql.Args() args: AnimateursFindUniqueArgs
  ): Promise<Animateurs | null> {
    const result = await this.service.animateurs(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @graphql.Mutation(() => Animateurs)
  async createAnimateurs(
    @graphql.Args() args: CreateAnimateursArgs
  ): Promise<Animateurs> {
    return await this.service.createAnimateurs({
      ...args,
      data: args.data,
    });
  }

  @graphql.Mutation(() => Animateurs)
  async updateAnimateurs(
    @graphql.Args() args: UpdateAnimateursArgs
  ): Promise<Animateurs | null> {
    try {
      return await this.service.updateAnimateurs({
        ...args,
        data: args.data,
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.Mutation(() => Animateurs)
  async deleteAnimateurs(
    @graphql.Args() args: DeleteAnimateursArgs
  ): Promise<Animateurs | null> {
    try {
      return await this.service.deleteAnimateurs(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }
}
