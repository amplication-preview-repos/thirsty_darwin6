/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as common from "@nestjs/common";
import * as swagger from "@nestjs/swagger";
import { isRecordNotFoundError } from "../../prisma.util";
import * as errors from "../../errors";
import { Request } from "express";
import { plainToClass } from "class-transformer";
import { ApiNestedQuery } from "../../decorators/api-nested-query.decorator";
import { RediffusionsService } from "../rediffusions.service";
import { RediffusionsCreateInput } from "./RediffusionsCreateInput";
import { Rediffusions } from "./Rediffusions";
import { RediffusionsFindManyArgs } from "./RediffusionsFindManyArgs";
import { RediffusionsWhereUniqueInput } from "./RediffusionsWhereUniqueInput";
import { RediffusionsUpdateInput } from "./RediffusionsUpdateInput";

export class RediffusionsControllerBase {
  constructor(protected readonly service: RediffusionsService) {}
  @common.Post()
  @swagger.ApiCreatedResponse({ type: Rediffusions })
  async createRediffusions(
    @common.Body() data: RediffusionsCreateInput
  ): Promise<Rediffusions> {
    return await this.service.createRediffusions({
      data: {
        ...data,

        pisode: data.pisode
          ? {
              connect: data.pisode,
            }
          : undefined,
      },
      select: {
        createdAt: true,
        dateDeRediffusion: true,
        id: true,

        pisode: {
          select: {
            id: true,
          },
        },

        titre: true,
        updatedAt: true,
      },
    });
  }

  @common.Get()
  @swagger.ApiOkResponse({ type: [Rediffusions] })
  @ApiNestedQuery(RediffusionsFindManyArgs)
  async rediffusionsItems(
    @common.Req() request: Request
  ): Promise<Rediffusions[]> {
    const args = plainToClass(RediffusionsFindManyArgs, request.query);
    return this.service.rediffusionsItems({
      ...args,
      select: {
        createdAt: true,
        dateDeRediffusion: true,
        id: true,

        pisode: {
          select: {
            id: true,
          },
        },

        titre: true,
        updatedAt: true,
      },
    });
  }

  @common.Get("/:id")
  @swagger.ApiOkResponse({ type: Rediffusions })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async rediffusions(
    @common.Param() params: RediffusionsWhereUniqueInput
  ): Promise<Rediffusions | null> {
    const result = await this.service.rediffusions({
      where: params,
      select: {
        createdAt: true,
        dateDeRediffusion: true,
        id: true,

        pisode: {
          select: {
            id: true,
          },
        },

        titre: true,
        updatedAt: true,
      },
    });
    if (result === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return result;
  }

  @common.Patch("/:id")
  @swagger.ApiOkResponse({ type: Rediffusions })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async updateRediffusions(
    @common.Param() params: RediffusionsWhereUniqueInput,
    @common.Body() data: RediffusionsUpdateInput
  ): Promise<Rediffusions | null> {
    try {
      return await this.service.updateRediffusions({
        where: params,
        data: {
          ...data,

          pisode: data.pisode
            ? {
                connect: data.pisode,
              }
            : undefined,
        },
        select: {
          createdAt: true,
          dateDeRediffusion: true,
          id: true,

          pisode: {
            select: {
              id: true,
            },
          },

          titre: true,
          updatedAt: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.Delete("/:id")
  @swagger.ApiOkResponse({ type: Rediffusions })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async deleteRediffusions(
    @common.Param() params: RediffusionsWhereUniqueInput
  ): Promise<Rediffusions | null> {
    try {
      return await this.service.deleteRediffusions({
        where: params,
        select: {
          createdAt: true,
          dateDeRediffusion: true,
          id: true,

          pisode: {
            select: {
              id: true,
            },
          },

          titre: true,
          updatedAt: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }
}
