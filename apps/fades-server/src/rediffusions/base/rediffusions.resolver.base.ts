/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as graphql from "@nestjs/graphql";
import { GraphQLError } from "graphql";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import { Rediffusions } from "./Rediffusions";
import { RediffusionsCountArgs } from "./RediffusionsCountArgs";
import { RediffusionsFindManyArgs } from "./RediffusionsFindManyArgs";
import { RediffusionsFindUniqueArgs } from "./RediffusionsFindUniqueArgs";
import { CreateRediffusionsArgs } from "./CreateRediffusionsArgs";
import { UpdateRediffusionsArgs } from "./UpdateRediffusionsArgs";
import { DeleteRediffusionsArgs } from "./DeleteRediffusionsArgs";
import { Pisodes } from "../../pisodes/base/Pisodes";
import { RediffusionsService } from "../rediffusions.service";
@graphql.Resolver(() => Rediffusions)
export class RediffusionsResolverBase {
  constructor(protected readonly service: RediffusionsService) {}

  async _rediffusionsItemsMeta(
    @graphql.Args() args: RediffusionsCountArgs
  ): Promise<MetaQueryPayload> {
    const result = await this.service.count(args);
    return {
      count: result,
    };
  }

  @graphql.Query(() => [Rediffusions])
  async rediffusionsItems(
    @graphql.Args() args: RediffusionsFindManyArgs
  ): Promise<Rediffusions[]> {
    return this.service.rediffusionsItems(args);
  }

  @graphql.Query(() => Rediffusions, { nullable: true })
  async rediffusions(
    @graphql.Args() args: RediffusionsFindUniqueArgs
  ): Promise<Rediffusions | null> {
    const result = await this.service.rediffusions(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @graphql.Mutation(() => Rediffusions)
  async createRediffusions(
    @graphql.Args() args: CreateRediffusionsArgs
  ): Promise<Rediffusions> {
    return await this.service.createRediffusions({
      ...args,
      data: {
        ...args.data,

        pisode: args.data.pisode
          ? {
              connect: args.data.pisode,
            }
          : undefined,
      },
    });
  }

  @graphql.Mutation(() => Rediffusions)
  async updateRediffusions(
    @graphql.Args() args: UpdateRediffusionsArgs
  ): Promise<Rediffusions | null> {
    try {
      return await this.service.updateRediffusions({
        ...args,
        data: {
          ...args.data,

          pisode: args.data.pisode
            ? {
                connect: args.data.pisode,
              }
            : undefined,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.Mutation(() => Rediffusions)
  async deleteRediffusions(
    @graphql.Args() args: DeleteRediffusionsArgs
  ): Promise<Rediffusions | null> {
    try {
      return await this.service.deleteRediffusions(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.ResolveField(() => Pisodes, {
    nullable: true,
    name: "pisode",
  })
  async getPisode(
    @graphql.Parent() parent: Rediffusions
  ): Promise<Pisodes | null> {
    const result = await this.service.getPisode(parent.id);

    if (!result) {
      return null;
    }
    return result;
  }
}
